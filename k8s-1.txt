

master_node:

sudo hostnamectl set-hostname master 
sud apt update -y
sudo su -

vi kube.sh

# disable swap
sudo swapoff -a

# Create the .conf file to load the modules at bootup
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

# Apply sysctl params without reboot
sudo sysctl --system

## Install CRIO Runtime
sudo apt-get update -y
sudo apt-get install -y software-properties-common curl apt-transport-https ca-certificates gpg

sudo curl -fsSL https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/cri-o-apt-keyring.gpg
echo "deb [signed-by=/etc/apt/keyrings/cri-o-apt-keyring.gpg] https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main/deb/ /" | sudo tee /etc/apt/sources.list.d/cri-o.list

sudo apt-get update -y
sudo apt-get install -y cri-o

sudo systemctl daemon-reload
sudo systemctl enable crio --now
sudo systemctl start crio.service

echo "CRI runtime installed successfully"

# Add Kubernetes APT repository and install required packages
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt-get update -y
sudo apt-get install -y kubelet="1.29.0-*" kubectl="1.29.0-*" kubeadm="1.29.0-*"
sudo apt-get update -y
sudo apt-get install -y jq

sudo systemctl enable --now kubelet
sudo systemctl start kubelet

-----------------------------
sh kube.sh

in master:

sudo kubeadm config images pull
sudo kubeadm init
 sudo mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config


in worker:

sudo kubeadm reset pre-flight checks

 sudo kubeadm join 172.31.6.22:6443 --token 67o1sj.i2ppazsym4q0ru4c \
        --discovery-token-ca-cert-hash sha256:b75eb7b1569bde6dabdd00198d3250185b50baf6d74b53e85d46a0525f0e5ae2 --v=5



only in the master node:
when you complete all above procedure:

kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.0/manifests/calico.yaml




in master:

ONE POD WITH ONE CONTAINER WHITH AN IMAGE OF UBUNTU

vi pod.yml

kind: Pod
apiVersion: v1
metadata:
  name: jspiders
spec:
  containers:
    - name: sample1
      image: ubuntu
      command: ["/bin/bash", "-c", "while true; do echo Hi everyone; sleep 5 ; done"]
  restartPolicy: Never         # Defaults to Always

:wq

 ls
  
-> # kubectl apply -f pod.yml
-> # kubectl get pods --> To check the pods
-> # kubectl get pods -o wide  --> t0 check the pods with detailed information
-> # kubectl describe pod jspiders  --> With the detailed info about the jspiders 
-> # kubectl logs -f jspiders
-> # kubectl delete -f pod.yml --> to delete the pod.yml

No resourcs found in default namespace.


ONE POD WITH TWO CONTAINERS"-

vi pod.yml

kind: pod    --> it is a kind of pod object
apiversion: v1
metadata:
  name: jspiders
spec:
  containers:
    - name: c1
      image: ubuntu
      command: ["/bin/bash", "-c", "while true; do echo Hi everyone; sleep 5; done"]
    - name: c2
      image: ubuntu
      command: ["/bin/bash", "-c", "while true; do echo Hi everyone; sleep 5; done"]

  restartPolicy: Never     #Default to Always

-> # cat pod.yml
-> # kubectl apply -f pod.yml  --> To run the pod with two containers
-> # kubectl get pods
-> # kubectl describe pod jspiders
-> # kubectl log -f 
-> # kubectl delete -f pod.yml


